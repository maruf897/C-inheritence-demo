name: Build and Deploy .NET 8 Project to IIS with Zero Downtime

on:
  push:
    branches:
      - main
      - dev

jobs:
  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v3
  #     with:
  #       dotnet-version: '8.0.x'
  #   - name: path change
  #     run: cd ./EmployeeApp
      
  #   - name: Restore dependencies
  #     run: dotnet restore 

  #   - name: Build
  #     run: dotnet build --configuration Release

  #   - name: Publish
  #     run: dotnet publish -c Release -o ./publish

  #   - name: Archive project files
  #     run: tar -czvf publish.tar.gz -C ./publish .

  #   - name: Upload artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: publish
  #       path: publish.tar.gz
  connect-and-run:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Remove existing PowerShell
      run: sudo apt-get remove -y powershell

    - name: Install dependencies and PowerShell 7.1
      run: |
        sudo apt-get install -y wget apt-transport-https software-properties-common
        source /etc/os-release
        wget -q https://packages.microsoft.com/config/ubuntu/$VERSION_ID/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        rm packages-microsoft-prod.deb
        sudo apt-get update
        wget https://github.com/PowerShell/PowerShell/releases/download/v7.1.0/powershell-7.1.0-linux-x64.tar.gz
        mkdir ~/powershell
        tar -xvf powershell-7.1.0-linux-x64.tar.gz -C ~/powershell
        sudo ln -s ~/powershell/pwsh /usr/bin/pwsh7.1

    - name: Install PSWSMan module
      run: |
        pwsh7.1 -Command 'Install-Module -Name PSWSMan -Force' 
        sudo pwsh7.1 -Command 'Install-WSMan'



    - name: Debug environment variables
      run: |
        echo "WINDOWS_EC2_USERNAME: ${{ secrets.EC2_USER }}"
        echo "WINDOWS_EC2_PASSWORD: ${{ secrets.EC2_PASSWORD }}"
        echo "WINDOWS_EC2_HOSTNAME: ${{ secrets.EC2_HOST }}"
      shell: bash

    - name: Run script on Windows EC2 instance
      shell: pwsh
      env:
        WINDOWS_EC2_USERNAME: ${{ secrets.EC2_USER }}
        WINDOWS_EC2_PASSWORD: ${{ secrets.EC2_PASSWORD }}
        WINDOWS_EC2_HOSTNAME: ${{ secrets.EC2_HOST }}
      run: |
        $username = $env:WINDOWS_EC2_USERNAME
        $password = $env:WINDOWS_EC2_PASSWORD
        $hostname = $env:WINDOWS_EC2_HOSTNAME

        if (-not $username) { throw "WINDOWS_EC2_USERNAME is null" }
        if (-not $password) { throw "WINDOWS_EC2_PASSWORD is null" }
        if (-not $hostname) { throw "WINDOWS_EC2_HOSTNAME is null" }

        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        $credentials = New-Object System.Management.Automation.PSCredential ($username, $securePassword)
        
        # Create a PowerShell session to the remote server
        $session = New-PSSession -ComputerName $hostname -Credential $credentials -Authentication Basic -UseSSL

        # Run the script on the remote server
        # Invoke-Command -Session $session -ScriptBlock { 
        #   C:\path\to\your\script.ps1 
        # }

        # Close the session
        Remove-PSSession -Session $session

  deploy:
    runs-on: windows-latest
    # needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Set WinRM Password
      run: echo "WINRM_PASSWORD=${{ secrets.EC2_PASSWORD }}" >> $GITHUB_ENV

    - name: Determine target directory
      id: determine-directory
      shell: pwsh
      run: |
        $session = New-PSSession -ComputerName ${{ secrets.EC2_HOST }} -Credential (New-Object PSCredential('${{ secrets.EC2_USER }}', (ConvertTo-SecureString '${{ env.WINRM_PASSWORD }}' -AsPlainText -Force))) -Port ${{ secrets.EC2_PORT }} -UseSSL -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)
        $targetDirectory = Invoke-Command -Session $session -ScriptBlock {
          if (Test-Path "C:\websites\zPax-Test-Portal-blue") {
            return "zPax-Test-Portal-green"
          } else {
            return "zPax-Test-Portal-blue"
          }
        }
        echo "target_directory=$targetDirectory" >> $GITHUB_ENV
        Remove-PSSession -Session $session

    # - name: Extract files and configure IIS
    #   shell: pwsh
    #   run: |
    #     $session = New-PSSession -ComputerName ${{ secrets.EC2_HOST }} -Credential (New-Object PSCredential('${{ secrets.EC2_USER }}', (ConvertTo-SecureString '${{ env.WINRM_PASSWORD }}' -AsPlainText -Force))) -Port ${{ secrets.EC2_PORT }} -UseSSL -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)
    #     Invoke-Command -Session $session -ScriptBlock {
    #       cd C:\websites\${{ env.target_directory }}
    #       tar -xzvf publish.tar.gz
    #       Remove-Item publish.tar.gz
    #       Import-Module WebAdministration
    #       if ((Get-WebSite -Name "zPax-Test-Portal").PhysicalPath -eq "C:\websites\zPax-Test-Portal-blue") {
    #         Set-ItemProperty "IIS:\Sites\zPax-Test-Portal" -name physicalPath -value "C:\websites\zPax-Test-Portal-green"
    #       } else {
    #         Set-ItemProperty "IIS:\Sites\zPax-Test-Portal" -name physicalPath -value "C:\websites\zPax-Test-Portal-blue"
    #       }
    #       Restart-WebAppPool -Name "zPax-Test-Portal"
    #     }
    #     Remove-PSSession -Session $session

    - name: Complete job
      run: echo "Deployment completed."
